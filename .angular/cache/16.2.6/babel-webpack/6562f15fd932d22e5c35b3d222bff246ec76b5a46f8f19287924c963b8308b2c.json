{"ast":null,"code":"import { timer, BehaviorSubject, Subscription, fromEvent } from \"rxjs\";\nimport { debounceTime, map, buffer, filter } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\n/**\n * Stopwatch service that provides the main functionality using RxJS\n */\nexport class StopwatchService {\n  #initialTime = 0;\n  #timer$ = new BehaviorSubject(this.#initialTime);\n  #lastStopedTime = this.#initialTime;\n  #timerSubscription = new Subscription();\n  #isRunning = false;\n  constructor() {}\n  /**\n  * Get the stopwatch Observable\n  *\n  * @param StopWatch stopwatch interface\n  */\n  get stopWatch$() {\n    return this.#timer$.pipe(map(seconds => this.displayStopwatch(seconds)));\n  }\n  /**\n  * Starts the stopwatch from the initial time or the last stopped count\n  */\n  startCount() {\n    if (this.#isRunning) {\n      return;\n    }\n    // Timer, so that the first emit is instantly (interval waits until the period is over for the first emit)\n    this.#timerSubscription = timer(0, 1000).pipe(map(value => value + this.#lastStopedTime))\n    // each emit of the Observable will result in a emit of the BehaviorSubject timer$\n    .subscribe(this.#timer$);\n    this.#isRunning = true;\n  }\n  /**\n   * Stops the stopwatch on the current count\n   */\n  stopCount() {\n    this.#lastStopedTime = this.#timer$.value;\n    this.#timerSubscription.unsubscribe();\n    this.#isRunning = false;\n  }\n  /**\n   * Resets the stopwatch to 0\n   */\n  resetStopwatch() {\n    this.#timerSubscription.unsubscribe();\n    this.#lastStopedTime = this.#initialTime;\n    this.#timer$.next(this.#initialTime);\n    this.#isRunning = false;\n  }\n  /**\n  * Checks if there were two consecutive clicks within 300ms and stops the time\n  */\n  waitCount() {\n    const mouse$ = fromEvent(document, 'click');\n    const buff$ = mouse$.pipe(debounceTime(300));\n    const click$ = mouse$.pipe(buffer(buff$), map(list => {\n      return list.length;\n    }), filter(x => x === 2));\n    click$.subscribe(() => this.stopCount());\n  }\n  /**\n  * Format time to display properly\n  *\n  * @param seconds used to convert seconds to format hh:mm:ss\n  */\n  displayStopwatch(seconds) {\n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor(seconds % 3600 / 60);\n    const secs = seconds % 60;\n    return {\n      hours: this.convertToString(hours),\n      minutes: this.convertToString(minutes),\n      seconds: this.convertToString(secs)\n    };\n  }\n  convertToString(value) {\n    return `${value < 10 ? \"0\" + value : value}`;\n  }\n  static #_ = this.ɵfac = function StopwatchService_Factory(t) {\n    return new (t || StopwatchService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: StopwatchService,\n    factory: StopwatchService.ɵfac,\n    providedIn: \"root\"\n  });\n}","map":{"version":3,"names":["timer","BehaviorSubject","Subscription","fromEvent","debounceTime","map","buffer","filter","StopwatchService","initialTime","timer$","lastStopedTime","timerSubscription","isRunning","constructor","stopWatch$","pipe","seconds","displayStopwatch","startCount","value","subscribe","stopCount","unsubscribe","resetStopwatch","next","waitCount","mouse$","document","buff$","click$","list","length","x","hours","Math","floor","minutes","secs","convertToString","_","_2","factory","ɵfac","providedIn"],"sources":["D:\\Internship\\Task1_stopwatch\\Stopwatch\\src\\app\\stopwatch.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport {\r\n  pipe,\r\n  Observable,\r\n  timer,\r\n  BehaviorSubject,\r\n  Subscription,\r\n  fromEvent\r\n} from \"rxjs\";\r\nimport { \r\n  debounceTime, \r\n  map, \r\n  buffer, \r\n  filter \r\n} from 'rxjs/operators';\r\n\r\nimport { StopWatch } from \"./stopwatch.interface\";\r\n\r\n@Injectable({\r\n  providedIn: \"root\"\r\n})\r\n\r\n/**\r\n * Stopwatch service that provides the main functionality using RxJS\r\n */\r\nexport class StopwatchService {\r\n  readonly #initialTime = 0;\r\n\r\n  #timer$: BehaviorSubject<number> = new BehaviorSubject(\r\n    this.#initialTime\r\n  );\r\n  #lastStopedTime: number = this.#initialTime;\r\n  #timerSubscription: Subscription = new Subscription();\r\n  #isRunning: boolean = false;\r\n\r\n  constructor() {}\r\n\r\n  /**\r\n * Get the stopwatch Observable\r\n *\r\n * @param StopWatch stopwatch interface\r\n */\r\n  public get stopWatch$(): Observable<StopWatch> {\r\n    return this.#timer$.pipe(\r\n      map((seconds: number): StopWatch => this.displayStopwatch(seconds))\r\n    );\r\n  }\r\n\r\n  /**\r\n * Starts the stopwatch from the initial time or the last stopped count\r\n */ \r\n  startCount(): void {\r\n    if (this.#isRunning) {\r\n      return;\r\n    }\r\n    // Timer, so that the first emit is instantly (interval waits until the period is over for the first emit)\r\n    this.#timerSubscription = timer(0, 1000) \r\n      .pipe(map((value: number): number => value + this.#lastStopedTime))\r\n      // each emit of the Observable will result in a emit of the BehaviorSubject timer$\r\n      .subscribe(this.#timer$); \r\n    this.#isRunning = true;\r\n  }\r\n\r\n/**\r\n * Stops the stopwatch on the current count\r\n */ \r\n  stopCount(): void {\r\n    this.#lastStopedTime = this.#timer$.value;\r\n    this.#timerSubscription.unsubscribe();\r\n    this.#isRunning = false;\r\n  }\r\n\r\n/**\r\n * Resets the stopwatch to 0\r\n */ \r\n  resetStopwatch(): void {\r\n    this.#timerSubscription.unsubscribe();\r\n    this.#lastStopedTime = this.#initialTime;\r\n    this.#timer$.next(this.#initialTime);\r\n    this.#isRunning = false;\r\n  }\r\n\r\n  /**\r\n * Checks if there were two consecutive clicks within 300ms and stops the time\r\n */  \r\n  waitCount(): void {\r\n    const mouse$ = fromEvent(document, 'click')\r\n    const buff$ = mouse$.pipe(\r\n      debounceTime(300),\r\n    )\r\n    const click$ = mouse$.pipe(\r\n      buffer(buff$),\r\n      map(list => {\r\n        return list.length;\r\n      }),\r\n      filter(x => x === 2),\r\n    )\r\n    click$.subscribe(() => \r\n          this.stopCount()\r\n        );\r\n    }\r\n\r\n  /**\r\n * Format time to display properly\r\n *\r\n * @param seconds used to convert seconds to format hh:mm:ss\r\n */\r\n  private displayStopwatch(seconds: number): StopWatch {\r\n    const hours = Math.floor(seconds / 3600);\r\n    const minutes = Math.floor(seconds % 3600 / 60);\r\n    const secs = seconds % 60;\r\n\r\n    return {\r\n      hours: this.convertToString(hours),\r\n      minutes: this.convertToString(minutes),\r\n      seconds: this.convertToString(secs),\r\n    };\r\n  }\r\n\r\n  private convertToString(value: number): string {\r\n    return `${value < 10 ? \"0\" + value : value}`;\r\n  }\r\n\r\n  \r\n}\r\n"],"mappings":"AACA,SAGEA,KAAK,EACLC,eAAe,EACfC,YAAY,EACZC,SAAS,QACJ,MAAM;AACb,SACEC,YAAY,EACZC,GAAG,EACHC,MAAM,EACNC,MAAM,QACD,gBAAgB;;AAQvB;;;AAGA,OAAM,MAAOC,gBAAgB;EAClB,CAAAC,WAAY,GAAG,CAAC;EAEzB,CAAAC,MAAO,GAA4B,IAAIT,eAAe,CACpD,IAAI,CAAC,CAAAQ,WAAY,CAClB;EACD,CAAAE,cAAe,GAAW,IAAI,CAAC,CAAAF,WAAY;EAC3C,CAAAG,iBAAkB,GAAiB,IAAIV,YAAY,EAAE;EACrD,CAAAW,SAAU,GAAY,KAAK;EAE3BC,YAAA,GAAe;EAEf;;;;;EAKA,IAAWC,UAAUA,CAAA;IACnB,OAAO,IAAI,CAAC,CAAAL,MAAO,CAACM,IAAI,CACtBX,GAAG,CAAEY,OAAe,IAAgB,IAAI,CAACC,gBAAgB,CAACD,OAAO,CAAC,CAAC,CACpE;EACH;EAEA;;;EAGAE,UAAUA,CAAA;IACR,IAAI,IAAI,CAAC,CAAAN,SAAU,EAAE;MACnB;;IAEF;IACA,IAAI,CAAC,CAAAD,iBAAkB,GAAGZ,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC,CACrCgB,IAAI,CAACX,GAAG,CAAEe,KAAa,IAAaA,KAAK,GAAG,IAAI,CAAC,CAAAT,cAAe,CAAC;IAClE;IAAA,CACCU,SAAS,CAAC,IAAI,CAAC,CAAAX,MAAO,CAAC;IAC1B,IAAI,CAAC,CAAAG,SAAU,GAAG,IAAI;EACxB;EAEF;;;EAGES,SAASA,CAAA;IACP,IAAI,CAAC,CAAAX,cAAe,GAAG,IAAI,CAAC,CAAAD,MAAO,CAACU,KAAK;IACzC,IAAI,CAAC,CAAAR,iBAAkB,CAACW,WAAW,EAAE;IACrC,IAAI,CAAC,CAAAV,SAAU,GAAG,KAAK;EACzB;EAEF;;;EAGEW,cAAcA,CAAA;IACZ,IAAI,CAAC,CAAAZ,iBAAkB,CAACW,WAAW,EAAE;IACrC,IAAI,CAAC,CAAAZ,cAAe,GAAG,IAAI,CAAC,CAAAF,WAAY;IACxC,IAAI,CAAC,CAAAC,MAAO,CAACe,IAAI,CAAC,IAAI,CAAC,CAAAhB,WAAY,CAAC;IACpC,IAAI,CAAC,CAAAI,SAAU,GAAG,KAAK;EACzB;EAEA;;;EAGAa,SAASA,CAAA;IACP,MAAMC,MAAM,GAAGxB,SAAS,CAACyB,QAAQ,EAAE,OAAO,CAAC;IAC3C,MAAMC,KAAK,GAAGF,MAAM,CAACX,IAAI,CACvBZ,YAAY,CAAC,GAAG,CAAC,CAClB;IACD,MAAM0B,MAAM,GAAGH,MAAM,CAACX,IAAI,CACxBV,MAAM,CAACuB,KAAK,CAAC,EACbxB,GAAG,CAAC0B,IAAI,IAAG;MACT,OAAOA,IAAI,CAACC,MAAM;IACpB,CAAC,CAAC,EACFzB,MAAM,CAAC0B,CAAC,IAAIA,CAAC,KAAK,CAAC,CAAC,CACrB;IACDH,MAAM,CAACT,SAAS,CAAC,MACX,IAAI,CAACC,SAAS,EAAE,CACjB;EACL;EAEF;;;;;EAKQJ,gBAAgBA,CAACD,OAAe;IACtC,MAAMiB,KAAK,GAAGC,IAAI,CAACC,KAAK,CAACnB,OAAO,GAAG,IAAI,CAAC;IACxC,MAAMoB,OAAO,GAAGF,IAAI,CAACC,KAAK,CAACnB,OAAO,GAAG,IAAI,GAAG,EAAE,CAAC;IAC/C,MAAMqB,IAAI,GAAGrB,OAAO,GAAG,EAAE;IAEzB,OAAO;MACLiB,KAAK,EAAE,IAAI,CAACK,eAAe,CAACL,KAAK,CAAC;MAClCG,OAAO,EAAE,IAAI,CAACE,eAAe,CAACF,OAAO,CAAC;MACtCpB,OAAO,EAAE,IAAI,CAACsB,eAAe,CAACD,IAAI;KACnC;EACH;EAEQC,eAAeA,CAACnB,KAAa;IACnC,OAAO,GAAGA,KAAK,GAAG,EAAE,GAAG,GAAG,GAAGA,KAAK,GAAGA,KAAK,EAAE;EAC9C;EAAC,QAAAoB,CAAA,G;qBAhGUhC,gBAAgB;EAAA;EAAA,QAAAiC,EAAA,G;WAAhBjC,gBAAgB;IAAAkC,OAAA,EAAhBlC,gBAAgB,CAAAmC,IAAA;IAAAC,UAAA,EANf;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}