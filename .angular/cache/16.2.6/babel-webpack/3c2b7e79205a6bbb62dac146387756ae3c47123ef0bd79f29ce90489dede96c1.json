{"ast":null,"code":"import { timer, BehaviorSubject, Subscription } from \"rxjs\";\nimport { map } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\n/**\n * Stopwatch service that provides the main functionality using RxJS\n */\nexport class StopwatchService {\n  #initialTime = 0;\n  #secondClick = false;\n  #delay = 0;\n  #timer$ = new BehaviorSubject(this.#initialTime);\n  #lastStopedTime = this.#initialTime;\n  #timerSubscription = new Subscription();\n  #isRunning = false;\n  constructor() {}\n  /**\n  * Get the list of fruits\n  *\n  * @param filters used to query the fruits\n  */\n  get stopWatch$() {\n    return this.#timer$.pipe(map(seconds => this.secondsToStopWatch(seconds)));\n  }\n  startCount() {\n    if (this.#isRunning) {\n      return;\n    }\n    this.#timerSubscription = timer(0, 1000) // Timer, so that the first emit is instantly (interval waits until the period is over for the first emit)\n    .pipe(map(value => value + this.#lastStopedTime)).subscribe(this.#timer$); // each emit of the Observable will result in a emit of the BehaviorSubject timer$\n    this.#isRunning = true;\n  }\n  stopTimer() {\n    this.#lastStopedTime = this.#timer$.value;\n    this.#timerSubscription.unsubscribe();\n    this.#isRunning = false;\n  }\n  resetStopwatch() {\n    this.#timerSubscription.unsubscribe();\n    this.#lastStopedTime = this.#initialTime;\n    this.#timer$.next(this.#initialTime);\n    this.#isRunning = false;\n  }\n  waitCount() {\n    if (!this.#secondClick) {\n      this.#secondClick = true;\n      this.#delay = Date.now();\n      return;\n    }\n    if (Date.now() - this.#delay <= 300) {\n      this.#lastStopedTime = this.#timer$.value;\n      this.#timerSubscription.unsubscribe();\n      this.#isRunning = false;\n    }\n    this.#secondClick = false;\n  }\n  secondsToStopWatch(seconds) {\n    let rest = seconds;\n    const hours = Math.floor(seconds / 3600);\n    rest = seconds % 3600;\n    const minutes = Math.floor(rest / 60);\n    rest = seconds % 60;\n    return {\n      hours: this.convertToNumberString(hours),\n      minutes: this.convertToNumberString(minutes),\n      seconds: this.convertToNumberString(rest)\n    };\n  }\n  convertToNumberString(value) {\n    return `${value < 10 ? \"0\" + value : value}`;\n  }\n  static #_ = this.ɵfac = function StopwatchService_Factory(t) {\n    return new (t || StopwatchService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: StopwatchService,\n    factory: StopwatchService.ɵfac,\n    providedIn: \"root\"\n  });\n}","map":{"version":3,"names":["timer","BehaviorSubject","Subscription","map","StopwatchService","initialTime","secondClick","delay","timer$","lastStopedTime","timerSubscription","isRunning","constructor","stopWatch$","pipe","seconds","secondsToStopWatch","startCount","value","subscribe","stopTimer","unsubscribe","resetStopwatch","next","waitCount","Date","now","rest","hours","Math","floor","minutes","convertToNumberString","_","_2","factory","ɵfac","providedIn"],"sources":["D:\\Internship\\Task1_stopwatch\\Stopwatch\\src\\app\\stopwatch.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport {\r\n  Observable,\r\n  timer,\r\n  BehaviorSubject,\r\n  Subscription\r\n} from \"rxjs\";\r\n\r\nimport { map } from \"rxjs/operators\";\r\nimport { StopWatch } from \"./stop-watch.interface\";\r\n\r\n@Injectable({\r\n  providedIn: \"root\"\r\n})\r\n\r\n/**\r\n * Stopwatch service that provides the main functionality using RxJS\r\n */\r\nexport class StopwatchService {\r\n  readonly #initialTime = 0;\r\n  #secondClick = false;\r\n  #delay = 0;\r\n\r\n  #timer$: BehaviorSubject<number> = new BehaviorSubject(\r\n    this.#initialTime\r\n  );\r\n  #lastStopedTime: number = this.#initialTime;\r\n  #timerSubscription: Subscription = new Subscription();\r\n  #isRunning: boolean = false;\r\n\r\n  constructor() {}\r\n\r\n  /**\r\n * Get the list of fruits \r\n *\r\n * @param filters used to query the fruits\r\n */\r\n  public get stopWatch$(): Observable<StopWatch> {\r\n    return this.#timer$.pipe(\r\n      map((seconds: number): StopWatch => this.secondsToStopWatch(seconds))\r\n    );\r\n  }\r\n\r\n  startCount(): void {\r\n    if (this.#isRunning) {\r\n      return;\r\n    }\r\n    this.#timerSubscription = timer(0, 1000) // Timer, so that the first emit is instantly (interval waits until the period is over for the first emit)\r\n      .pipe(map((value: number): number => value + this.#lastStopedTime))\r\n      .subscribe(this.#timer$); // each emit of the Observable will result in a emit of the BehaviorSubject timer$\r\n    this.#isRunning = true;\r\n  }\r\n\r\n  stopTimer(): void {\r\n    this.#lastStopedTime = this.#timer$.value;\r\n    this.#timerSubscription.unsubscribe();\r\n    this.#isRunning = false;\r\n  }\r\n\r\n  resetStopwatch(): void {\r\n    this.#timerSubscription.unsubscribe();\r\n    this.#lastStopedTime = this.#initialTime;\r\n    this.#timer$.next(this.#initialTime);\r\n    this.#isRunning = false;\r\n  }\r\n\r\n  waitCount(): void {\r\n    if(!this.#secondClick){\r\n      this.#secondClick = true\r\n      this.#delay = Date.now();\r\n      return\r\n    }\r\n    if(Date.now() - this.#delay <= 300){\r\n      this.#lastStopedTime = this.#timer$.value;\r\n      this.#timerSubscription.unsubscribe();\r\n      this.#isRunning = false;\r\n    }\r\n    this.#secondClick = false\r\n  }\r\n\r\n  private secondsToStopWatch(seconds: number): StopWatch {\r\n    let rest = seconds;\r\n    const hours = Math.floor(seconds / 3600);\r\n    rest = seconds % 3600;\r\n    const minutes = Math.floor(rest / 60);\r\n    rest = seconds % 60;\r\n\r\n    return {\r\n      hours: this.convertToNumberString(hours),\r\n      minutes: this.convertToNumberString(minutes),\r\n      seconds: this.convertToNumberString(rest),\r\n    };\r\n  }\r\n\r\n  private convertToNumberString(value: number): string {\r\n    return `${value < 10 ? \"0\" + value : value}`;\r\n  }\r\n\r\n  \r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}