{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from \"@angular/core\";\nimport { Subject, takeUntil } from \"rxjs\";\n/**\n * Stopwatch component\n */\nexport let AppComponent = class AppComponent {\n  constructor(stopwatchService) {\n    this.stopwatchService = stopwatchService;\n    this.destroy$ = new Subject();\n    this.stopwatchService.stopWatch$.pipe(takeUntil(this.destroy$)).subscribe(val => this.stopwatch = val);\n  }\n  ngOnDestroy() {\n    this.destroy$.next(true);\n    this.destroy$.unsubscribe();\n  }\n  startCount() {\n    this.stopwatchService.startCount();\n  }\n  stopCount() {\n    this.stopwatchService.stopTimer();\n  }\n  resetStopwatch() {\n    this.stopwatchService.resetStopwatch();\n  }\n  waitCount() {\n    this.stopwatchService.waitCount();\n  }\n};\nAppComponent = __decorate([Component({\n  selector: \"my-app\",\n  templateUrl: \"./app.component.html\",\n  styleUrls: [\"./app.component.scss\"]\n})], AppComponent);","map":{"version":3,"names":["Component","Subject","takeUntil","AppComponent","constructor","stopwatchService","destroy$","stopWatch$","pipe","subscribe","val","stopwatch","ngOnDestroy","next","unsubscribe","startCount","stopCount","stopTimer","resetStopwatch","waitCount","__decorate","selector","templateUrl","styleUrls"],"sources":["D:\\Internship\\Task1_stopwatch\\Stopwatch\\src\\app\\app.component.ts"],"sourcesContent":["import { Component, OnDestroy, VERSION } from \"@angular/core\";\nimport { interval, Subject, Subscription, takeUntil } from \"rxjs\";\n\nimport { StopWatch } from \"./stop-watch.interface\";\nimport { StopwatchService } from \"./stopwatch.service\";\n\n/**\n * Stopwatch component\n */\n@Component({\n  selector: \"my-app\",\n  templateUrl: \"./app.component.html\",\n  styleUrls: [\"./app.component.scss\"]\n})\nexport class AppComponent implements OnDestroy {\n  public stopwatch!: StopWatch;\n  \n  destroy$: Subject<boolean> = new Subject<boolean>();\n\n  constructor(private stopwatchService: StopwatchService) {\n      this.stopwatchService.stopWatch$\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(\n        (val: StopWatch) => (this.stopwatch = val)\n      )\n  }\n  \n  ngOnDestroy() {\n    this.destroy$.next(true);\n    this.destroy$.unsubscribe();\n  }\n\n  public startCount(): void {\n    this.stopwatchService.startCount();\n  }\n\n  public stopCount(): void {\n    this.stopwatchService.stopTimer();\n  }\n\n  public resetStopwatch(): void {\n    this.stopwatchService.resetStopwatch();\n  }\n  public waitCount(): void {\n    this.stopwatchService.waitCount();\n  }\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAA4B,eAAe;AAC7D,SAAmBC,OAAO,EAAgBC,SAAS,QAAQ,MAAM;AAKjE;;;AAQO,WAAMC,YAAY,GAAlB,MAAMA,YAAY;EAKvBC,YAAoBC,gBAAkC;IAAlC,KAAAA,gBAAgB,GAAhBA,gBAAgB;IAFpC,KAAAC,QAAQ,GAAqB,IAAIL,OAAO,EAAW;IAG/C,IAAI,CAACI,gBAAgB,CAACE,UAAU,CAC/BC,IAAI,CAACN,SAAS,CAAC,IAAI,CAACI,QAAQ,CAAC,CAAC,CAC9BG,SAAS,CACPC,GAAc,IAAM,IAAI,CAACC,SAAS,GAAGD,GAAI,CAC3C;EACL;EAEAE,WAAWA,CAAA;IACT,IAAI,CAACN,QAAQ,CAACO,IAAI,CAAC,IAAI,CAAC;IACxB,IAAI,CAACP,QAAQ,CAACQ,WAAW,EAAE;EAC7B;EAEOC,UAAUA,CAAA;IACf,IAAI,CAACV,gBAAgB,CAACU,UAAU,EAAE;EACpC;EAEOC,SAASA,CAAA;IACd,IAAI,CAACX,gBAAgB,CAACY,SAAS,EAAE;EACnC;EAEOC,cAAcA,CAAA;IACnB,IAAI,CAACb,gBAAgB,CAACa,cAAc,EAAE;EACxC;EACOC,SAASA,CAAA;IACd,IAAI,CAACd,gBAAgB,CAACc,SAAS,EAAE;EACnC;CACD;AAhCYhB,YAAY,GAAAiB,UAAA,EALxBpB,SAAS,CAAC;EACTqB,QAAQ,EAAE,QAAQ;EAClBC,WAAW,EAAE,sBAAsB;EACnCC,SAAS,EAAE,CAAC,sBAAsB;CACnC,CAAC,C,EACWpB,YAAY,CAgCxB"},"metadata":{},"sourceType":"module","externalDependencies":[]}